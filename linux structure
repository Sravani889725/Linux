+----------------------------------------------------+
| User Applications (Vim, Docker, Apache, etc.)     |
+----------------------------------------------------+
| Shell (Bash, Zsh, Fish, etc.)                     |  <-- Part of the OS
+----------------------------------------------------+
| System Libraries (glibc, libc, OpenSSL, etc.)     |  <-- Part of the OS
+----------------------------------------------------+
| System Utilities (ls, grep, systemctl, etc.)      |  <-- Part of the OS
+----------------------------------------------------+
| Linux Kernel (Process, Memory, FS, Network)       |  <-- Core of the OS
+----------------------------------------------------+
| Hardware (CPU, RAM, Disk, Network, Peripherals)   |
+----------------------------------------------------+


(a) Hardware Layer

ðŸ”¹ The physical components of the computer (CPU, RAM, disk, network interfaces, etc.).
ðŸ”¹ The OS interacts with hardware using device drivers.
(b) Kernel (Core of Linux OS)

ðŸ”¹ The Linux Kernel is responsible for directly managing system resources, including:

    Process Management â€“ Schedules processes and handles multitasking.

    Memory Management â€“ Allocates and deallocates RAM efficiently.

    Device Drivers â€“ Acts as an interface between software and hardware.

    File System Management â€“ Manages how data is stored and retrieved.

    Network Management â€“ Handles communication between systems.

(c) Shell (Command Line Interface - CLI)

ðŸ”¹ A command interpreter that allows users to interact with the kernel.
ðŸ”¹ Examples: Bash, Zsh, Fish, Dash, Ksh.
ðŸ”¹ Converts user commands into system calls for the kernel.
(d) User Applications

ðŸ”¹ End-user programs like web browsers, text editors, DevOps tools, etc.
ðŸ”¹ Applications interact with the OS using system calls via the shell or GUI.





Linux Distributions:

Linux distributions (distros) are different versions of Linux that package the Linux kernel with various software, system utilities, and package managers. Each distro is designed for different use cases, such as personal computing, server management, or security.

Here are some popular Linux distributions:

Ubuntu â€“ One of the most beginner-friendly distros, widely used for personal and server use. It has great community support.

CentOS (discontinued, replaced by AlmaLinux/Rocky Linux) â€“ Previously a popular choice for servers, based on Red Hat Enterprise Linux (RHEL).

Debian â€“ A very stable and reliable distro, often used as a base for other distros like Ubuntu.

Fedora â€“ A cutting-edge distro that introduces new features before they reach RHEL.

Arch Linux â€“ A lightweight, rolling-release distro for advanced users who like customization.

Kali Linux â€“ Designed for cybersecurity and penetration testing.

Alpine Linux â€“ A lightweight, security-focused distro often used in containers.








Setup Linux Environment on Windows and MacOS
There are multiple ways to setup a Linux environment on a Windows or Mac machines such as cloud vm, wsl2, virtualbox, Hyperkit e.t.c.,. However what I would recommend is using a container as a Linux environment.

Just install Docker desktop, run the below command and create linux container of any distribution without worrying about the cost and connectivity issues.

Docker Command to Run Ubuntu Linux Container in windows host (Persistent & Long-Term)
Create a folder with name ubuntu-data in your downloads folder.

Then run the below command in poweshell updating your username.

docker run -dit `
  --name ubuntu-container `
  --hostname ubuntu-dev `
  --restart unless-stopped `
  --cpus="2" `
  --memory="4g" `
  --mount type=bind,source="C:/Users/Monica Korla/Downloads/ubuntu-container",target=/data `
  -v /var/run/docker.sock:/var/run/docker.sock `
  -p 2222:22 `
  -p 8080:80 `
  --env TZ=Asia/Kolkata `
  --env LANG=en_US.UTF-8 `
  ubuntu:latest /bin/bash              
Docker Command to Run Ubuntu Linux Container in mac or linux host (Persistent & Long-Term)
docker run -dit \
  --name ubuntu-container \
  --hostname ubuntu-dev \
  --restart unless-stopped \
  --cpus="2" \
  --memory="4g" \
  --mount type=bind,source=/tmp/ubuntu-data,target=/data \
  -v /var/run/docker.sock:/var/run/docker.sock \
  -p 2222:22 \
  -p 8080:80 \
  --env TZ=Asia/Kolkata \
  --env LANG=en_US.UTF-8 \
  ubuntu:latest /bin/bash
                 
Explanation of Each Parameter
Parameter	                                                                            Description
-dit	                                                                        Runs the container in detached (-d), interactive (-i), and terminal (-t) mode.
--name ubuntu-container        	                                                Assigns a name to the container for easy management.
--hostname ubuntu-dev	                                                        Sets the containerâ€™s hostname.
--restart unless-stopped	                                                     Ensures the container restarts automatically unless manually stopped.
--cpus="2"	                                                                     Limits the container to 2 CPU cores.
--memory="4g"	                                                                 Allocates 4GB RAM to the container.
--mount type=bind,source=C:/ubuntu-data,target=/data	                         Mounts a folder from Windows into the container to persist data.
-v /var/run/docker.sock:/var/run/docker.sock	                                  Allows running Docker commands inside the container (optional).
-p 2222:22	                                                                      Maps port 2222 on the host to 22 (SSH) inside the container.
-p 8080:80	                                                                      Maps port 8080 on the host to 80 (for web services).
--env TZ=Asia/Kolkata	                                                        Sets the timezone (modify based on your location).
--env LANG=en_US.UTF-8	                                                                Sets the language settings inside the container.
ubuntu:latest /bin/bash                                                           	Uses the latest Ubuntu image and runs Bash shell.
